// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Syndic.Persistence.EntityFramework;

#nullable disable

namespace Syndic.Persistence.EntityFramework.Migrations
{
    [DbContext(typeof(SyndicContext))]
    [Migration("20220405203503_Syndic")]
    partial class Syndic
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Syndic.domain.Models.Categorie", b =>
                {
                    b.Property<int>("IdCategorie")
                        .HasColumnType("integer")
                        .HasColumnName("id_categorie");

                    b.Property<string>("NomCategorie")
                        .HasColumnType("text")
                        .HasColumnName("nom_categorie");

                    b.HasKey("IdCategorie")
                        .HasName("categorie_pkey");

                    b.ToTable("categorie", (string)null);
                });

            modelBuilder.Entity("Syndic.domain.Models.Choix", b =>
                {
                    b.Property<int>("IdChoix")
                        .HasColumnType("integer")
                        .HasColumnName("id_choix");

                    b.Property<int?>("IdVote")
                        .HasColumnType("integer")
                        .HasColumnName("id_vote");

                    b.Property<string>("choix")
                        .HasColumnType("text")
                        .HasColumnName("choix");

                    b.HasKey("IdChoix")
                        .HasName("choix_pkey");

                    b.HasIndex("IdVote");

                    b.ToTable("choix", (string)null);
                });

            modelBuilder.Entity("Syndic.domain.Models.Dossier", b =>
                {
                    b.Property<int>("IdDossier")
                        .HasColumnType("integer")
                        .HasColumnName("id_dossier");

                    b.Property<int?>("Categorie")
                        .HasColumnType("integer")
                        .HasColumnName("categorie");

                    b.Property<DateTime?>("DateCreation")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_creation");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int?>("Statut")
                        .HasColumnType("integer")
                        .HasColumnName("statut");

                    b.Property<string>("Titre")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("IdDossier")
                        .HasName("dossier_pkey");

                    b.HasIndex("Categorie");

                    b.HasIndex("Statut");

                    b.ToTable("dossier", (string)null);
                });

            modelBuilder.Entity("Syndic.domain.Models.Fichier", b =>
                {
                    b.Property<int>("IdFichier")
                        .HasColumnType("integer")
                        .HasColumnName("id_fichier");

                    b.Property<DateTime?>("DateCreation")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_creation");

                    b.Property<int?>("IdDossier")
                        .HasColumnType("integer")
                        .HasColumnName("id_dossier");

                    b.Property<string>("Note")
                        .HasColumnType("text")
                        .HasColumnName("note");

                    b.Property<string>("Type")
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.Property<string>("fichier")
                        .HasColumnType("text")
                        .HasColumnName("fichier");

                    b.HasKey("IdFichier")
                        .HasName("fichier_pkey");

                    b.HasIndex("IdDossier");

                    b.ToTable("fichier", (string)null);
                });

            modelBuilder.Entity("Syndic.domain.Models.Note", b =>
                {
                    b.Property<int>("IdNote")
                        .HasColumnType("integer")
                        .HasColumnName("id_note");

                    b.Property<DateTime?>("DateCreation")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_creation");

                    b.Property<int?>("IdDossier")
                        .HasColumnType("integer")
                        .HasColumnName("id_dossier");

                    b.Property<string>("Type")
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.Property<string>("note")
                        .HasColumnType("text")
                        .HasColumnName("note");

                    b.HasKey("IdNote")
                        .HasName("note_pkey");

                    b.HasIndex("IdDossier");

                    b.ToTable("note", (string)null);
                });

            modelBuilder.Entity("Syndic.domain.Models.Participant", b =>
                {
                    b.Property<int>("IdParticipant")
                        .HasColumnType("integer")
                        .HasColumnName("id_participant");

                    b.Property<string>("NomParticipant")
                        .HasColumnType("text")
                        .HasColumnName("nomparticipant");

                    b.HasKey("IdParticipant")
                        .HasName("participant_pkey");

                    b.ToTable("participant", (string)null);
                });

            modelBuilder.Entity("Syndic.domain.Models.Resultat", b =>
                {
                    b.Property<int>("IdParticipant")
                        .HasColumnType("integer")
                        .HasColumnName("id_participant");

                    b.Property<int>("IdVote")
                        .HasColumnType("integer")
                        .HasColumnName("id_vote");

                    b.Property<int?>("IdChoix")
                        .HasColumnType("integer")
                        .HasColumnName("id_choix");

                    b.HasKey("IdParticipant", "IdVote")
                        .HasName("resultat_pkey");

                    b.HasIndex("IdChoix");

                    b.HasIndex("IdVote");

                    b.ToTable("resultat", (string)null);
                });

            modelBuilder.Entity("Syndic.domain.Models.Statut", b =>
                {
                    b.Property<int>("IdStatut")
                        .HasColumnType("integer")
                        .HasColumnName("id_statut");

                    b.Property<string>("NomStatut")
                        .HasColumnType("text")
                        .HasColumnName("nom_statut");

                    b.HasKey("IdStatut")
                        .HasName("statut_pkey");

                    b.ToTable("statut", (string)null);
                });

            modelBuilder.Entity("Syndic.domain.Models.Vote", b =>
                {
                    b.Property<int>("IdVote")
                        .HasColumnType("integer")
                        .HasColumnName("id_vote");

                    b.Property<DateTime?>("DateCreation")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_creation");

                    b.Property<int?>("IdDossier")
                        .HasColumnType("integer")
                        .HasColumnName("id_dossier");

                    b.Property<string>("Titre")
                        .HasColumnType("text")
                        .HasColumnName("titre");

                    b.Property<string>("Type")
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.HasKey("IdVote")
                        .HasName("vote_pkey");

                    b.HasIndex("IdDossier");

                    b.ToTable("vote", (string)null);
                });

            modelBuilder.Entity("Syndic.domain.Models.Choix", b =>
                {
                    b.HasOne("Syndic.domain.Models.Vote", "IdVoteNavigation")
                        .WithMany("Choixes")
                        .HasForeignKey("IdVote")
                        .HasConstraintName("choix_id_vote_fkey");

                    b.Navigation("IdVoteNavigation");
                });

            modelBuilder.Entity("Syndic.domain.Models.Dossier", b =>
                {
                    b.HasOne("Syndic.domain.Models.Categorie", "CategorieNavigation")
                        .WithMany("Dossiers")
                        .HasForeignKey("Categorie")
                        .HasConstraintName("dossier_categorie_fkey");

                    b.HasOne("Syndic.domain.Models.Statut", "StatutNavigation")
                        .WithMany("Dossiers")
                        .HasForeignKey("Statut")
                        .HasConstraintName("dossier_statut_fkey");

                    b.Navigation("CategorieNavigation");

                    b.Navigation("StatutNavigation");
                });

            modelBuilder.Entity("Syndic.domain.Models.Fichier", b =>
                {
                    b.HasOne("Syndic.domain.Models.Dossier", "IdDossierNavigation")
                        .WithMany("Fichiers")
                        .HasForeignKey("IdDossier")
                        .HasConstraintName("fichier_id_dossier_fkey");

                    b.Navigation("IdDossierNavigation");
                });

            modelBuilder.Entity("Syndic.domain.Models.Note", b =>
                {
                    b.HasOne("Syndic.domain.Models.Dossier", "IdDossierNavigation")
                        .WithMany("Notes")
                        .HasForeignKey("IdDossier")
                        .HasConstraintName("note_id_dossier_fkey");

                    b.Navigation("IdDossierNavigation");
                });

            modelBuilder.Entity("Syndic.domain.Models.Resultat", b =>
                {
                    b.HasOne("Syndic.domain.Models.Choix", "IdChoixNavigation")
                        .WithMany("Resultats")
                        .HasForeignKey("IdChoix")
                        .HasConstraintName("resultat_id_choix_fkey");

                    b.HasOne("Syndic.domain.Models.Participant", "IdParticipantNavigation")
                        .WithMany("Resultats")
                        .HasForeignKey("IdParticipant")
                        .IsRequired()
                        .HasConstraintName("resultat_id_participant_fkey");

                    b.HasOne("Syndic.domain.Models.Vote", "IdVoteNavigation")
                        .WithMany("Resultats")
                        .HasForeignKey("IdVote")
                        .IsRequired()
                        .HasConstraintName("resultat_id_vote_fkey");

                    b.Navigation("IdChoixNavigation");

                    b.Navigation("IdParticipantNavigation");

                    b.Navigation("IdVoteNavigation");
                });

            modelBuilder.Entity("Syndic.domain.Models.Vote", b =>
                {
                    b.HasOne("Syndic.domain.Models.Dossier", "IdDossierNavigation")
                        .WithMany("Votes")
                        .HasForeignKey("IdDossier")
                        .HasConstraintName("vote_id_dossier_fkey");

                    b.Navigation("IdDossierNavigation");
                });

            modelBuilder.Entity("Syndic.domain.Models.Categorie", b =>
                {
                    b.Navigation("Dossiers");
                });

            modelBuilder.Entity("Syndic.domain.Models.Choix", b =>
                {
                    b.Navigation("Resultats");
                });

            modelBuilder.Entity("Syndic.domain.Models.Dossier", b =>
                {
                    b.Navigation("Fichiers");

                    b.Navigation("Notes");

                    b.Navigation("Votes");
                });

            modelBuilder.Entity("Syndic.domain.Models.Participant", b =>
                {
                    b.Navigation("Resultats");
                });

            modelBuilder.Entity("Syndic.domain.Models.Statut", b =>
                {
                    b.Navigation("Dossiers");
                });

            modelBuilder.Entity("Syndic.domain.Models.Vote", b =>
                {
                    b.Navigation("Choixes");

                    b.Navigation("Resultats");
                });
#pragma warning restore 612, 618
        }
    }
}
