// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Syndic.Persistence.EntityFramework;

#nullable disable

namespace Syndic.Persistence.EntityFramework.Migrations
{
    [DbContext(typeof(SyndicContext))]
    partial class SyndicContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Syndic.domain.Models.Case", b =>
                {
                    b.Property<int>("IdCase")
                        .HasColumnType("integer")
                        .HasColumnName("id_case");

                    b.Property<int?>("Category")
                        .HasColumnType("integer")
                        .HasColumnName("category");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int?>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("Status");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("creationDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("creation_Date");

                    b.HasKey("IdCase")
                        .HasName("case_pkey");

                    b.HasIndex("Category");

                    b.HasIndex("Status");

                    b.ToTable("case", (string)null);
                });

            modelBuilder.Entity("Syndic.domain.Models.Category", b =>
                {
                    b.Property<int>("IdCategory")
                        .HasColumnType("integer")
                        .HasColumnName("id_category");

                    b.Property<string>("CategoryName")
                        .HasColumnType("text")
                        .HasColumnName("category_name");

                    b.HasKey("IdCategory")
                        .HasName("category_pkey");

                    b.ToTable("category", (string)null);
                });

            modelBuilder.Entity("Syndic.domain.Models.Choice", b =>
                {
                    b.Property<int>("IdChoice")
                        .HasColumnType("integer")
                        .HasColumnName("id_choice");

                    b.Property<int?>("IdVote")
                        .HasColumnType("integer")
                        .HasColumnName("id_vote");

                    b.Property<string>("choice")
                        .HasColumnType("text")
                        .HasColumnName("choice");

                    b.HasKey("IdChoice")
                        .HasName("choice_pkey");

                    b.HasIndex("IdVote");

                    b.ToTable("choice", (string)null);
                });

            modelBuilder.Entity("Syndic.domain.Models.file", b =>
                {
                    b.Property<int>("IdFile")
                        .HasColumnType("integer")
                        .HasColumnName("id_File");

                    b.Property<int?>("IdCase")
                        .HasColumnType("integer")
                        .HasColumnName("id_case");

                    b.Property<string>("Note")
                        .HasColumnType("text")
                        .HasColumnName("note");

                    b.Property<string>("Type")
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.Property<string>("_file")
                        .HasColumnType("text")
                        .HasColumnName("file");

                    b.Property<DateTime?>("creationDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("creation_Date");

                    b.HasKey("IdFile")
                        .HasName("File_pkey");

                    b.HasIndex("IdCase");

                    b.ToTable("File", (string)null);
                });

            modelBuilder.Entity("Syndic.domain.Models.Note", b =>
                {
                    b.Property<int>("IdNote")
                        .HasColumnType("integer")
                        .HasColumnName("id_note");

                    b.Property<int?>("IdCase")
                        .HasColumnType("integer")
                        .HasColumnName("id_case");

                    b.Property<string>("Type")
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.Property<DateTime?>("creationDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("creation_Date");

                    b.Property<string>("note")
                        .HasColumnType("text")
                        .HasColumnName("note");

                    b.HasKey("IdNote")
                        .HasName("note_pkey");

                    b.HasIndex("IdCase");

                    b.ToTable("note", (string)null);
                });

            modelBuilder.Entity("Syndic.domain.Models.Participant", b =>
                {
                    b.Property<int>("IdParticipant")
                        .HasColumnType("integer")
                        .HasColumnName("id_participant");

                    b.Property<string>("participantName")
                        .HasColumnType("text")
                        .HasColumnName("participant_name");

                    b.HasKey("IdParticipant")
                        .HasName("participant_pkey");

                    b.ToTable("participant", (string)null);
                });

            modelBuilder.Entity("Syndic.domain.Models.results", b =>
                {
                    b.Property<int>("IdParticipant")
                        .HasColumnType("integer")
                        .HasColumnName("id_participant");

                    b.Property<int>("IdVote")
                        .HasColumnType("integer")
                        .HasColumnName("id_vote");

                    b.Property<int?>("IdChoice")
                        .HasColumnType("integer")
                        .HasColumnName("id_choice");

                    b.HasKey("IdParticipant", "IdVote")
                        .HasName("results_pkey");

                    b.HasIndex("IdChoice");

                    b.HasIndex("IdVote");

                    b.ToTable("results", (string)null);
                });

            modelBuilder.Entity("Syndic.domain.Models.Status", b =>
                {
                    b.Property<int>("IdStatus")
                        .HasColumnType("integer")
                        .HasColumnName("id_Status");

                    b.Property<string>("statusName")
                        .HasColumnType("text")
                        .HasColumnName("status_name");

                    b.HasKey("IdStatus")
                        .HasName("Status_pkey");

                    b.ToTable("Status", (string)null);
                });

            modelBuilder.Entity("Syndic.domain.Models.Vote", b =>
                {
                    b.Property<int>("IdVote")
                        .HasColumnType("integer")
                        .HasColumnName("id_vote");

                    b.Property<int?>("IdCase")
                        .HasColumnType("integer")
                        .HasColumnName("id_dase");

                    b.Property<string>("Title")
                        .HasColumnType("text")
                        .HasColumnName("titre");

                    b.Property<string>("Type")
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.Property<DateTime?>("creationDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("creation_Date");

                    b.HasKey("IdVote")
                        .HasName("vote_pkey");

                    b.HasIndex("IdCase");

                    b.ToTable("vote", (string)null);
                });

            modelBuilder.Entity("Syndic.domain.Models.Case", b =>
                {
                    b.HasOne("Syndic.domain.Models.Category", "CategoryNavigation")
                        .WithMany("Cases")
                        .HasForeignKey("Category")
                        .HasConstraintName("case_category_fkey");

                    b.HasOne("Syndic.domain.Models.Status", "StatusNavigation")
                        .WithMany("Cases")
                        .HasForeignKey("Status")
                        .HasConstraintName("case_Status_fkey");

                    b.Navigation("CategoryNavigation");

                    b.Navigation("StatusNavigation");
                });

            modelBuilder.Entity("Syndic.domain.Models.Choice", b =>
                {
                    b.HasOne("Syndic.domain.Models.Vote", "IdVoteNavigation")
                        .WithMany("Choices")
                        .HasForeignKey("IdVote")
                        .HasConstraintName("choice_id_vote_fkey");

                    b.Navigation("IdVoteNavigation");
                });

            modelBuilder.Entity("Syndic.domain.Models.file", b =>
                {
                    b.HasOne("Syndic.domain.Models.Case", "IdCaseNavigation")
                        .WithMany("_files")
                        .HasForeignKey("IdCase")
                        .HasConstraintName("File_id_case_fkey");

                    b.Navigation("IdCaseNavigation");
                });

            modelBuilder.Entity("Syndic.domain.Models.Note", b =>
                {
                    b.HasOne("Syndic.domain.Models.Case", "IdCaseNavigation")
                        .WithMany("Notes")
                        .HasForeignKey("IdCase")
                        .HasConstraintName("note_id_dase_fkey");

                    b.Navigation("IdCaseNavigation");
                });

            modelBuilder.Entity("Syndic.domain.Models.results", b =>
                {
                    b.HasOne("Syndic.domain.Models.Choice", "IdChoiceNavigation")
                        .WithMany("Results")
                        .HasForeignKey("IdChoice")
                        .HasConstraintName("results_id_choice_fkey");

                    b.HasOne("Syndic.domain.Models.Participant", "IdParticipantNavigation")
                        .WithMany("Results")
                        .HasForeignKey("IdParticipant")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("results_id_participant_fkey");

                    b.HasOne("Syndic.domain.Models.Vote", "IdVoteNavigation")
                        .WithMany("Results")
                        .HasForeignKey("IdVote")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("results_id_vote_fkey");

                    b.Navigation("IdChoiceNavigation");

                    b.Navigation("IdParticipantNavigation");

                    b.Navigation("IdVoteNavigation");
                });

            modelBuilder.Entity("Syndic.domain.Models.Vote", b =>
                {
                    b.HasOne("Syndic.domain.Models.Case", "IdCaseNavigation")
                        .WithMany("Votes")
                        .HasForeignKey("IdCase")
                        .HasConstraintName("vote_id_dase_fkey");

                    b.Navigation("IdCaseNavigation");
                });

            modelBuilder.Entity("Syndic.domain.Models.Case", b =>
                {
                    b.Navigation("Notes");

                    b.Navigation("Votes");

                    b.Navigation("_files");
                });

            modelBuilder.Entity("Syndic.domain.Models.Category", b =>
                {
                    b.Navigation("Cases");
                });

            modelBuilder.Entity("Syndic.domain.Models.Choice", b =>
                {
                    b.Navigation("Results");
                });

            modelBuilder.Entity("Syndic.domain.Models.Participant", b =>
                {
                    b.Navigation("Results");
                });

            modelBuilder.Entity("Syndic.domain.Models.Status", b =>
                {
                    b.Navigation("Cases");
                });

            modelBuilder.Entity("Syndic.domain.Models.Vote", b =>
                {
                    b.Navigation("Choices");

                    b.Navigation("Results");
                });
#pragma warning restore 612, 618
        }
    }
}
